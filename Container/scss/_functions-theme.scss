@use "sass:math";

// Function for converting px to rem.
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

// Function to generate color gradation by name
@function cake-color($theme-color: "primary", $gradation: "base") {

  // simply use: $color-gradations
  // Get the map of colors in specific $theme-color
  $gradation-theme: map-get($color-gradations, $theme-color);
  @if ($gradation-theme == null) {
    $color: map-get($theme-colors, $theme-color);
    @if ($color == null or $gradation != "base") {
      @error "The color \"cake-color(#{$theme-color}, â€¦)\" does not exist!";
    }
    @return $color;
  }

  // Get the specific color with correct $gradation
  $color: map-get($gradation-theme, $gradation);

  @if ($color == null) {
    @if ($gradation != "base") {
      @error "The color \"cake-color(#{$theme-color}, #{$gradation})\" does not exist!";
    }
    $color: map-get($theme-colors, $theme-color);
  }
  @return $color;
}

//Function to convert variable to string
@function to-string($value) {
  @return inspect($value);
}

//Function to escape string or variable to url-encoded string
@function url-encode($string) {
  $string: to-string($string);
  $map: (
    "%": "%25",
    "<": "%3C",
    ">": "%3E",
    " ": "%20",
    "!": "%21",
    "*": "%2A",
    "'": "%27",
    '"': "%22",
    "(": "%28",
    ")": "%29",
    ";": "%3B",
    ":": "%3A",
    "@": "%40",
    "&": "%26",
    "=": "%3D",
    "+": "%2B",
    "$": "%24",
    ",": "%2C",
    "/": "%2F",
    "?": "%3F",
    "#": "%23",
    "[": "%5B",
    "]": "%5D"
  );
  $new: $string;
  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }
  @return $new;
}

// get height from the hypotenuse of an isosceles triangle
@function cake-get-height-of-isosceles-triangle($hypotenuse, $alpha, $beta) {
  $b: ($hypotenuse * math.sin($beta)) / math.sin($alpha);
  $hypotenuse-height: $b * math.sin($beta);

  @if (math.unit($hypotenuse) == "rem") {
    @return math.floor($hypotenuse-height * 16) / 16;
  } @else {
    @return math.floor($hypotenuse-height);
  }
}

// Function to deep-merge maps
@function cake-map-merge($map1, $map2) {
  @if (type-of($map1) == map or (type-of($map1) == list and length($map1) == 0)) and (type-of($map2) == map or (type-of($map2) == list and length($map2) == 0)) {
    $result: $map1;
    @each $key, $value in $map2 {
      @if (type-of(map-get($result, $key)) == map and type-of($value) == map) {
        $result: map-merge($result, ($key: cake-map-merge(map-get($result, $key), $value)));
      }
      @else if (map-get((), "merge-lists") and type-of(map-get($result, $key)) == list and type-of($value) == list) {
        $result: map-merge($result, ($key: join(map-get($result, $key), $value)));
      }
      @else {
        $result: map-merge($result, ($key: $value));
      }
    }
    @return $result;
  }
  @else {
    @warn "cake-map-merge() expects it\'s parameters to be map types!";
    @return null;
  }
}

// Function to get browser-focus styling
@function cake-browser-focus($focus-color: $browser-focus-border-inner-color, $focus-outer-color: $browser-focus-border-outer-color) {
  @return 0 0 0 $browser-focus-border-inner-width $focus-color, 0 0 0 ($browser-focus-border-inner-width + $browser-focus-border-outer-width) $focus-outer-color;
}
